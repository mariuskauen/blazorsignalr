@page "/counter"
@using Blazor.Extensions
@using Blazor.Extensions.Storage
@inject LocalStorage  localStorage

<p>Current count: @currentCount</p>
<p>@myMessage</p>

<button class="btn btn-primary" @onclick="SendMessage">Click me</button>

@code {
    [Inject]
    private HubConnectionBuilder _hubConnectionBuilder { get; set; }
    HubConnection connection;
    int currentCount = 0;
    string token;
    string myMessage;

    protected override async Task OnInitializedAsync()
    {
        token = await localStorage.GetItem<string>("token");

        connection = _hubConnectionBuilder
            .WithUrl("https://localhost:44314/chathub", // The hub URL. If the Hub is hosted on the server where the blazor is hosted, you can just use the relative path.
        opt =>
        {
            opt.LogLevel = SignalRLogLevel.Trace; // Client log level
            opt.Transport = HttpTransportType.WebSockets; // Which transport you want to use for this connection
        })
        .Build(); // Build the HubConnection

        connection.On<int>("UpdateCounter", this.UpdateCounter);
        connection.On<string>("Connected", this.AddGroup);
        connection.On<string>("Message", this.ReceivedMessage);
        await connection.StartAsync();
    }

    async Task ReceivedMessage(string message)
    {
        myMessage = message;
        StateHasChanged();
        return;
    }

    async Task AddGroup(string noe)
    {
        Console.WriteLine("Connected");
        await connection.InvokeAsync("AddToGroup", token);
    }

    async Task UpdateCounter(int i)
    {
        currentCount = i;
        StateHasChanged();
    }

    async Task ButtonPressed()
    {
        currentCount++;
        await connection.InvokeAsync("ButtonPressed", currentCount);
    }
    async Task SendMessage()
    {
        await connection.InvokeAsync("SendMessage", "Dette er en test!");
    }



}
